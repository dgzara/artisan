<?php

/**
 * InventarioProductosTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class InventarioProductosTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object InventarioProductosTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('InventarioProductos');
    }

    public function getLastItems($bodega){
        $productos = Doctrine_Core::getTable('Producto')->findAll();
        $inventario = array();

        foreach($productos as $producto){
            $registro = $this->buscarReciente($producto->getId(), $bodega);

            if($registro){
                $inventario[] = $registro;
            }
            else{
                $nuevo_inventario = new InventarioProductos();
                $nuevo_inventario->setBodegaId($bodega);
                $nuevo_inventario->setProductoId($producto->getId());
                $nuevo_inventario->setCantidad(0);
                $nuevo_inventario->setFecha(date('Y/m/d/H:m'));
                $nuevo_inventario->save();
                $inventario[] = $this->buscarReciente($producto->getId(), $bodega);
            }
        }
        return $inventario;
    }

    private function buscarReciente($producto_id, $bodega_id){
        $q = Doctrine_Query::create();
        $q->from('InventarioProductos i');
        $q->where('i.producto_id = ?', $producto_id);
        $q->andWhere('i.bodega_id = ?', $bodega_id);
        $q->orderBy('i.updated_at DESC');
        return $q->fetchOne();
    }

    public function getTodasPorRama($bodega, $rama){

      //$productos = Doctrine_Core::getTable('Producto')->findAll();
      $productos = Doctrine_Core::getTable('Producto')
      ->createQuery('a')
      ->where('rama_id = ?', $rama)
      ->execute();

        $inventario = array();

        foreach($productos as $producto){
            $registro = $this->buscarReciente($producto->getId(), $bodega);

            if($registro){
                $inventario[] = $registro;
            }
            else{
                $nuevo_inventario = new InventarioProductos();
                $nuevo_inventario->setBodegaId($bodega);
                $nuevo_inventario->setProductoId($producto->getId());
                $nuevo_inventario->setCantidad(0);
                $nuevo_inventario->setFecha(date('Y/m/d/H:m'));
                $nuevo_inventario->save();
                $inventario[] = $this->buscarReciente($producto->getId(), $bodega);
            }
        }
        return $inventario;
    }

    public function getStock($bodega_id, $producto_id){
        $producto = $this->buscarReciente($producto_id, $bodega_id);
        if($producto){
            return $producto->getCantidad();
        }
        else{
            return 0;
        }
    }
}