<?php

/**
 * Insumo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    quesos
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Insumo extends BaseInsumo
{
    public function save(Doctrine_Connection $conn = null) {
        if ($this->isNew()) {

            // Guardamos
            $insumo = parent::save($conn);

            // Actualizamos los inventarios de Materia Prima
            $nuevo_inventario = new InventarioMateriaPrima();
            $nuevo_inventario->setFecha(date('Y/m/d/H:m'));
            $nuevo_inventario->setCantidad(0);
            $nuevo_inventario->setInsumoId($this->getId());
            $nuevo_inventario->save();
        }
        else{
            $insumo = parent::save($conn);
        }
        return $insumo ;
    }

    public function getProveedores(){
        $relaciones = $this->getProveedorInsumo();
        $proveedores = array();

        foreach($relaciones as $relacion){
            $proveedores[$relacion->getProveedor()->getId()] = $relacion->getProveedor();
        }
        return $proveedores;
    }

    public function getProveedorInsumoByProveedor($id){
        $q = Doctrine_Query::create();
        $q->from('ProveedorInsumo pv');
        $q->where('pv.insumo_id = ?', $this->getId());
        $q->andWhere('pv.proveedor_id = ?', $id);

        $pi = $q->fetchOne();
        return $pi->getPrecio();
    }

    public function getPresentacionByInsumo($id){
        $q = Doctrine_Query::create();
        $q->from('insumo pv');
        $q->where('pv.id = ?', $this->getId());
        $pi = $q->fetchOne();
        return $pi->getPresentacion();
    }

    public function getNombreCompleto(){
        return $this->getNombre().' '.$this->getPresentacion().$this->getUnidad();
    }

    public function getCantidadDisponible(){
        $q = Doctrine_Query::create();
        $q->from('InventarioMateriaPrima i');
        $q->where('i.insumo_id = ?', $this->getId());
        $q->orderBy('i.created_at DESC');

        $inventario = $q->fetchOne();

        if($inventario){
            return $inventario->getCantidad();
        }
        else{
            return '$0';
        }
    }

    public function cambiarInventario($cantidad, $usuario = null){
        $q = Doctrine_Query::create();
        $q->from('InventarioMateriaPrima i');
        $q->where('i.insumo_id = ?', $this->getId());
        $q->orderBy('i.updated_at DESC');

        $inventario = $q->fetchOne();
        $vieja_cantidad = $inventario->getCantidad();

        $nueva_cantidad = $inventario->getCantidad() + $cantidad;

        $nuevo_inventario = new InventarioMateriaPrima();
        $nuevo_inventario->setFecha(date('Y/m/d/H:m'));
        $nuevo_inventario->setCantidad($nueva_cantidad);
        $nuevo_inventario->setInsumoId($this->getId());
        $nuevo_inventario->save();

         $nombre = $this->getNombreCompleto(); 
         $usuario = sfContext::getInstance()->getUser()->getGuardUser()->getName();

         $nuevo_inventario = new Registro();
         $nuevo_inventario->setAccionId(5);
         $nuevo_inventario->setBodegaId(0);
         $nuevo_inventario->setBodegaNombre('ComÃºn');
         $nuevo_inventario->setProductoId($id);
         $nuevo_inventario->setNombre($nombre);
         $nuevo_inventario->setAccion('Insumo');
         $nuevo_inventario->setUsuarioNombre($usuario);
         $nuevo_inventario->setCantidad($cantidad);
         $nuevo_inventario->setCantidadVieja($vieja_cantidad);
         $nuevo_inventario->setCantidadNueva($nueva_cantidad);
         $nuevo_inventario->save();
    }

    public function getOrdenCompraMes($fecha1 = null, $fecha2 = null){

       if(!$fecha1){
            $fecha1 = date("Y-m-d", strtotime(date('Y').'-'.date('m').'-01'));
        }

        if(!$fecha2){
            $fecha2 = date('Y-m-d');
        }     
        $fecha1 = date('Y-m-d',strtotime($fecha1));
        $fecha2 = date('Y-m-d',strtotime($fecha2));
        


        //if(!$fecha){
         //   $fecha = date('Y/m/d');
        //}
        
        $q = Doctrine_Query::create();
        $q->from('OrdenCompra o');
        $q->leftJoin('o.OrdenCompraInsumo oi');
        $q->where("o.fecha_pago >= '".$fecha1."'");
        $q->andWhere("o.fecha_pago <= '".$fecha2."'");
         
      //  $q->where('MONTH(o.fecha_pago) = MONTH(?)', $fecha);
        //$q->andWhere('YEAR(o.fecha_pago) = YEAR(?)', $fecha);
        $q->andWhere('oi.insumo_id = ?', $this->getId());

        return $q->execute();
        
    }

    public function getCostoMes($fecha1 = null, $fecha2 = null){

        if(!$fecha1){
            $fecha1 = date("Y-m-d", strtotime(date('Y').'-'.date('m').'-01'));

        }

        if(!$fecha2){
            $fecha2 = date('Y-m-d');
        }     
        $fecha1 = date('Y-m-d',strtotime($fecha1));
        $fecha2 = date('Y-m-d',strtotime($fecha2));
        

//quiero ver para un insumo, cuantas ordenes de compra lo compraron entre una fecha dada
//y sumar eso.

        $q = Doctrine_Query::create();
//        $q->select('SUM(oi.neto * oi.cantidad) as neto');
//        $q->from('OrdenCompra o');
//        $q->leftJoin('o.OrdenCompraInsumo oi');
//        $q->where('MONTH(o.fecha_pago) = MONTH(?)', $fecha);
//        $q->andWhere('YEAR(o.fecha_pago) = YEAR(?)', $fecha);
//        $q->andWhere('oi.insumo_id = ?', $this->getId());
//         $q->Where('oi.insumo_id = ?', $this->getId());

         $q->select('SUM(oi.neto * oi.cantidad) as neto');
         $q->from('OrdenCompraInsumo oi');
         $q->innerJoin('oi.OrdenCompra o');
         $q->where("o.fecha_pago >= '".$fecha1."'");
         $q->andWhere("o.fecha_pago <= '".$fecha2."'");
         $q->andWhere('oi.insumo_id = ?', $this->getId());
         //$q->where('oi.insumo_id = ?', $this->getId());
        $neto = $q->fetchOne();

        if($neto->getNeto()){
            // Calculamos
            $neto = $neto->getNeto();
            $iva = intval($neto * 0.19);
            $total = $neto + $iva;

            $n = new sfNumberFormat('es_CL');
            return '$ '.$n->format($total, 'd', 'CLP');
        }
        else{
            return '$ 0';
        }

    }


}