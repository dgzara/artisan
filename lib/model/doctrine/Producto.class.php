<?php

/**
 * Producto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    quesos
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Producto extends BaseProducto {

    public function save(Doctrine_Connection $conn = null) {

        if ($this->isNew()) {   
            // Seteamos el código acorde a la nomenclatura
            $first = $this->getRama()->getNombre();
            $second = $this->getNombre();
            $nombre = substr($first, 0, 2).''.substr($second, 0, 2);
            $tercero = Doctrine_Core::getTable('Producto')->getLastCodigo($nombre);
            $nombre = $nombre.''.$tercero;
            $this->setCodigo(strtoupper($nombre));

            // Guardamos el producto
            $producto = parent::save($conn);

            // Actualizamos los inventarios
            $bodegas = Doctrine_Core::getTable('Bodega')->findAll();

            foreach($bodegas as $bodega){
                $nuevo_inventario = new InventarioProductos();
                $nuevo_inventario->setFecha(date('Y/m/d/H:m'));
                $nuevo_inventario->setCantidad(0);
                $nuevo_inventario->setProductoId($this->getId());
                $nuevo_inventario->setBodegaId($bodega->getId());
                $nuevo_inventario->save();
            } 
        }
        else{
            $this->updateInternoSQL();
            $producto = parent::save($conn);
        }
        return $producto;
    }

    public function delete(Doctrine_Connection $conn = null) {
        $this->deleteSQL();
        parent::delete($conn);
    }

    public function asArray($host) {
        return array(
            'codigo' => $this->getCodigo(),
            'nombre' => $this->getNombre(),
            'rama' => $this->getRama()->getNombre(),
            'presentacion' => $this->getPresentacion(),
            'unidad' => $this->getUnidad()
        );
    }

    public function getNombreCompleto(){
        return $this->getRama()->getNombre().' '.$this->getNombre().' '.$this->getPresentacion().$this->getUnidad();
    }

    public function getClienteProductoByCliente($id){
        $q = Doctrine_Query::create();
        $q->from('ClienteProducto cp');
        $q->where('cp.producto_id = ?', $this->getId());
        $q->andWhere('cp.cliente_id = ?', $id);

        $pi = $q->fetchOne();
        return $pi->getPrecio();
    }

    public function insertSQL($local_id){
       $sql = "INSERT INTO productos (codigo, nombre, rama, presentacion, unidad, codigoLocal) VALUES (\":codigo\", \":nombre\", \":rama\", \":presentacion\", \":unidad\", \":codLocal\")";
        $this->generarSQL($sql, $local_id);
    }

    public function updateSQL($local_id){
        $sql = "UPDATE productos SET codigo = \":codigo\", nombre = \":nombre\", rama = \":rama\", presentacion = \":presentacion\", unidad = \":unidad\", codigoLocal = \":codLocal\" WHERE codigo = \":codigo\"";
        $this->generarSQL($sql, $local_id);
    }

    public function deleteSQL(){
        $sql = "DELETE FROM productos WHERE codigo = \"".$this->getCodigo()."\";";

        $tabla = new TablaQueries();
        $tabla->setInstruccion($sql);
        $tabla->save();
    }

    protected function updateInternoSQL(){
        $sql = "UPDATE productos SET codigo = \":codigo\", nombre = \":nombre\", rama = \":rama\", presentacion = \":presentacion\", unidad = \":unidad\" WHERE codigo = \":codigo\"";
        $this->generarSQL($sql, null);
    }

    protected function generarSQL($sql, $local_id = null){
        $parametros = array(':codigo', ':nombre', ':rama', ':presentacion', ':unidad', ':codLocal');
        $reemplazo = array($this->getCodigo(), $this->getNombre(), $this->getRama()->getNombre(), $this->getPresentacion(), $this->getUnidad(), $local_id);
        $instruccion = str_replace($parametros, $reemplazo, $sql);

        $tabla = new TablaQueries();
        $tabla->setInstruccion($instruccion);
        $tabla->save();
    }

    public function getMaduracionTotal(){
        //return $this->getProduccion($this->getMaduracion()*2) + $this->getProduccion($this->getMaduracion());
        
        $q = Doctrine_Query::create();
        $q->select('SUM(cantidad_actual) as suma');
        $q->from('Lote');
        $q->where('producto_id = ?', $this->getId());
        $q->andWhere('accion = "En Maduración"');
        $cantidad = $q->fetchOne();
        if($cantidad->getSuma() != 0){
            return $cantidad->getSuma();
        }
        else{
            return 0;
        }
        
    }
    
    public function getStockValdivia(){
      return Doctrine::getTable('InventarioProductos')->getStock(1, $this->getId());
    }

    public function getStockSantiago(){
      return Doctrine::getTable('InventarioProductos')->getStock(2, $this->getId());
    }

    public function getStockTotal(){
        return $this->getStockSantiago() + $this->getStockValdivia();
    }

    public function getTotal(){
        return $this->getMaduracionTotal() + $this->getTransito() + $this->getStockTotal();
    }

    public function getColor() {
        if ($this->getTotal() < $this->getStockCritico()) {

            return "#ff3300";
        } else {
            return "#66cc00";
        }
    }

    public function getTodasFechas(){
        $q = Doctrine_Query::create();
        $q->from('Lote');
        $q->groupBy('fecha_elaboracion');
        $q->orderBy('fecha_elaboracion');
        $fechas = $q->execute();

        $retorno = array();
        foreach($fechas as $fecha){
            $retorno[] = $fecha->getFechaElaboracion();
        }
        return $retorno;
    }

    public function getFechas($day = null){
        if(!$day){
            $day = date('d-m-Y');
        }
        $number_weeks = intval(($this->getMaduracion()) / 7);
        $fechas = array();

        for($i=-4; $i < 6; $i++){
            if($i!=0){
                if($i < 0){
                    $signo = '-';
                }
                else{
                    $signo = '+';
                }
                $week = strtotime($signo.(abs($i) * $number_weeks).' week', strtotime($day));
            }
            else{
                $week = strtotime($day);
            }
            $fechas[] = date('d-m-Y', strtotime('last monday', $week));
        }

        return $fechas;
    }

    public function getProduccion($dia_buscado, $day = null){
        if(!$day){
            $day = date('Y/m/d/H:m');
        }

        $dia_d = date('Y/m/d', strtotime('-'.$dia_buscado.' days', strtotime($day)));

        // Obtenemos todos los lotes que fueron producidos en tal semana
        $q = Doctrine_Query::create();
        $q->from('Lote');
        $q->where('producto_id = ?', $this->getId());
        $q->andWhere('YEARWEEK(fecha_elaboracion) = YEARWEEK(?)', $dia_d);
        $lotes = $q->execute();

        
        // Calculamos las sumas
        $total = 0;
        $semana = date('W', strtotime($day));
        $agno = date('Y', strtotime($day));

        foreach($lotes as $lote){
            $cantidad = $lote->getCantidad();

//            //Si entró en maduración
//            if($lote->getFechaEntrada() && $semana >= date('W', strtotime($lote->getFechaEntrada())) && $agno >= date('Y', strtotime($lote->getFechaEntrada()))){
//                $cantidad = $lote->getCantidad_Actual();
//            }

            //Si ya salió de maduración
            if($lote->getFechaSalida() && $semana >= date('W', strtotime($lote->getFechaSalida())) && $agno >= date('Y', strtotime($lote->getFechaSalida()))){
                $cantidad = $cantidad - $lote->getCantidadDanada() - $lote->getCantidadFF();
            }
            //Si ya fue empacado
            if($lote->getFechaEmpaque() && $semana >= date('W', strtotime($lote->getFechaEmpaque())) && $agno >= date('Y', strtotime($lote->getFechaEmpaque()))){
                $cantidad = $cantidad - $lote->getCcValdivia();
            }
            // Si ya fue recibido en Stgo
            if($lote->getFechaRecepcion() && $semana >= date('W', strtotime($lote->getFechaRecepcion())) && $agno >= date('Y', strtotime($lote->getFechaRecepcion()))){
                $cantidad = $lote->getCantidad_Recibida() - $lote->getCantidad_Danada_Stgo() - $lote->getCantidad_Ff_Stgo() - $lote->getCc_Santiago();
            }

            $total += $cantidad;
        }

        return $total;


//        $cantidad = $q->fetchOne();
//        if($cantidad->getSuma() != 0){
//            return $cantidad->getSuma();
//        }
//        else{
//            return 0;
//        }
    }

    public function getTransito(){

        $q = Doctrine_Query::create();
        $q->select('SUM(cantidad_actual) as suma');
        $q->from('Lote');
        $q->where('producto_id = ?', $this->getId());
        $q->andWhere('accion = "Recepcionar"');
        $cantidad = $q->fetchOne();
        if($cantidad->getSuma() != 0){
            return $cantidad->getSuma();
        }
        else{
            return 0;
        }
    }

}
