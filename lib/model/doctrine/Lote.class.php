<?php

/**
 * Lote
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    quesos
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Lote extends BaseLote {

    public function save(Doctrine_Connection $conn = null) {
        if ($this->isNew()) {
            $pautafecha = new DateTime($this->getPauta()->getFecha());
            $fecha = date_format($pautafecha, 'ymd');
            $codProducto = $this->getProducto()->getCodigo();
            $numero = Doctrine_Core::getTable('Lote')->getLastCodigo($fecha, $codProducto);
            $codigo = $fecha.'-'.$codProducto.'-'.$numero;
            $this->setNumero($codigo);
            $this->setFechaElaboracion($this->getPauta()->getFecha());
            
            
        }
        else{

        }
        return parent::save($conn);
    }

    public function cambiarInventario($id, $cantidad, $fecha, $bodega, $opcion, $usuario = null, $tipo = null) {

        $q = Doctrine_Query::create();
        //$q->select('i.cantidad');
        $q->from('InventarioProductos i');
        $q->where('i.producto_id = ?', $id);
        $q->andWhere('i.bodega_id= ?', $bodega);
        $q->orderBy('i.updated_at DESC');

        $inventario = $q->fetchOne();
        $vieja_cantidad = $inventario->getCantidad();

        if ($opcion == 'aumentar') {
            $nueva_cantidad = $inventario->getCantidad() + $cantidad;
        } else if ($opcion == 'disminuir') {
            $nueva_cantidad = $inventario->getCantidad() - $cantidad;
        }

        //  else{
        //      $nueva_cantidad = $cantidad;
        //  }
        $nuevo_inventario = new InventarioProductos();
        $nuevo_inventario->setFecha($fecha);
        $nuevo_inventario->setCantidad($nueva_cantidad);
        $nuevo_inventario->setProductoId($id);
        $nuevo_inventario->setBodegaId($bodega);
        $nuevo_inventario->save();

         $s = Doctrine_Query::create();
         $s->select('sv.nombre');
         $s->from('Bodega sv');
         $s->where('sv.id = ?', $bodega);
         $si = $s->fetchOne();
         $bodeganombre = $si->getNombre(); 
     
         $nombre = $this->getNumero(); 

         $nuevo_inventario = new Registro();
         $nuevo_inventario->setAccionId(3);
         $nuevo_inventario->setBodegaId($bodega);
         $nuevo_inventario->setBodegaNombre($bodeganombre);
         $nuevo_inventario->setProductoId($id);
         $nuevo_inventario->setNombre($nombre.' '. $productonombre.' '. $productocodigo );
         $nuevo_inventario->setAccion('Lote Inventario Productos '.$tipo);
         $nuevo_inventario->setCantidad($cantidad);
         $nuevo_inventario->setUsuarioNombre($usuario);
         $nuevo_inventario->setCantidadVieja($vieja_cantidad);
         $nuevo_inventario->setCantidadNueva($nueva_cantidad);
         $nuevo_inventario->save();
    }

	public function cambiarInventarioDescriptor($id, $cantidad, $fecha, $opcion, $usuario = null, $tipo = null){

        $q = Doctrine_Query::create();
        $q->select('i.cantidad');
        $q->from('InventarioMateriaPrima i');
        $q->where('i.insumo_id = ?', $id);
        $q->orderBy('i.created_at DESC');

        $inventario = $q->fetchOne();
        $vieja_cantidad = $inventario->getCantidad();

        if ($opcion == 'aumentar') {
            $nueva_cantidad = $inventario->getCantidad() + $cantidad;
        } else if ($opcion == 'disminuir') {
            $nueva_cantidad = $inventario->getCantidad() - $cantidad;
        }
         $nuevo_inventario = new InventarioMateriaPrima();
         $nuevo_inventario->setFecha($fecha);
         $nuevo_inventario->setCantidad($nueva_cantidad);
         $nuevo_inventario->setInsumoId($id);
         $nuevo_inventario->save();

         
         $nombre = $this->getNumero(); 


         $nuevo_inventario = new Registro();
         $nuevo_inventario->setAccionId(4);
         $nuevo_inventario->setBodegaId(0);
         $nuevo_inventario->setBodegaNombre('Común');
         $nuevo_inventario->setProductoId($id);
         $nuevo_inventario->setNombre($nombre.' '. $productonombre.' '. $productocodigo);
         $nuevo_inventario->setAccion('Lote Inventario Materia Prima '.$tipo);
         $nuevo_inventario->setUsuarioNombre($usuario);
         $nuevo_inventario->setCantidad($cantidad);
         $nuevo_inventario->setCantidadVieja($vieja_cantidad);
         $nuevo_inventario->setCantidadNueva($nueva_cantidad);
         $nuevo_inventario->save();
    }

    public function dateadd($date, $dd=0, $mm=0, $yy=0, $hh=0, $mn=0, $ss=0) {
        $date_r = getdate(strtotime($date));
        $date_result = date("d M Y", mktime(($date_r["hours"] + $hh), ($date_r["minutes"] + $mn), ($date_r["seconds"] + $ss), ($date_r["mon"] + $mm), ($date_r["mday"] + $dd), ($date_r["year"] + $yy)));
        return $date_result;
    }

    public function getRestarFechasLote() {
        date_default_timezone_set('America/Santiago');
        $fecha_entrada = $this->getFecha_entrada();
        $antes = new DateTime($fecha_entrada);
        //echo $antes->format('Y-m-d');
        $mes1 = $antes->format('m');
        $dia1 = $antes->format('d');
        $ano1 = $antes->format('Y');
        //defino fecha 2
        $ano2 = date("Y");
        $mes2 = date("m");
        $dia2 = date("d");
        //echo $fecha_entrada;
        //echo date("Y m d h");
        //calculo timestam de las dos fechas
        $timestamp1 = mktime(0, 0, 0, $mes1, $dia1, $ano1);
        $timestamp2 = mktime(4, 12, 0, $mes2, $dia2, $ano2);
        //resto a una fecha la otra
        $segundos_diferencia = $timestamp1 - $timestamp2;
        //convierto segundos en días
        $dias_diferencia = $segundos_diferencia / (60 * 60 * 24);
        //obtengo el valor absoulto de los días (quito el posible signo negativo)
        $dias_diferencia = abs($dias_diferencia);
        //quito los decimales a los días de diferencia
        $dias_diferencia = floor($dias_diferencia);
        return $dias_diferencia;
    }

    public function getColor() {
        if ($this->getRestarFechasLote() >= $this->getProducto()->getDuracion()) {

            return "#66cc00";
        } else {
            return "#ff3300";
        }
    }

    public function getCantidadByFechaElaboracion($fecha){
        $q = Doctrine_Query::create();
        $q->select('SUM(cantidad) as suma');
        $q->from('Lote');
        $q->where('fecha_elaboracion = ?', $fecha);
        $q->andWhere('producto_id = ?', $this->getProductoId());
        $cantidad = $q->fetchOne();
        if($cantidad->getSuma() != 0){
            return $cantidad->getSuma();
        }
        else{
            return 0;
        }
    }

    public function getFechas(){
        $q = Doctrine_Query::create();
        $q->from('Lote');
        $q->where('producto_id = ?', $this->getProductoId());
        $q->groupBy('fecha_elaboracion');
        $q->orderBy('fecha_elaboracion');
        $fechas = $q->execute();

        $retorno = array();
        foreach($fechas as $fecha){
            $retorno[] = $fecha->getFechaElaboracion();
        }
        return $retorno;
    }

    public function getTodasFechas(){
        $q = Doctrine_Query::create();
        $q->from('Lote');
        $q->groupBy('fecha_elaboracion');
        $q->orderBy('fecha_elaboracion DESC');
        $fechas = $q->execute();

        $retorno = array();
        foreach($fechas as $fecha){
            $retorno[] = $fecha->getFechaElaboracion();
        }
        return $retorno;
    }

    public function getProduccion(){
        $fechas = $this->getTodasFechas();
        $producciones = array();

        // Contamos la cantidad
        foreach($fechas as $fecha){
            $producciones[] = $this->getCantidadByFechaElaboracion($fecha);
        }

        return $producciones;
    }

    public function getRendimiento(){
        $rendimiento = 0;
        if($this->getAccion() != 'Rechazado'){
            $rendimiento = substr(100*($this->getCantidad()- $this->getCantidad_Danada() - $this->getCantidad_Danada_Stgo() - $this->getCantidad_Ff() - $this->getCantidad_Ff_Stgo()) / $this->getCantidad(), 0, 5);
        }
        return $rendimiento;
    }

    public function getCantidadActualIndex() {
        if($this->getCantidad_Actual()== NULL)
            return $this->getCantidad();

        else{
            return $this->getCantidad_Actual();
        }
    }

    public function getDescendenciaDirecta()
    {
        $q = Doctrine_Query::create();
        $q->from('Lote l');
        $q->where('l.padre = ?', $this->getId());

        return $q->fetchOne();
    }

    public function getDescendienteVivo()
    {
        $idx = $this;
        $new = $this;
        while($new)
        {
            $new = $new->getDescendenciaDirecta();
            if($new)
            {
                $idx = $new;
            }
        }
        return $idx;
    }

     public function getAncestro()
    {
        $idx=$this;
        $new=$this;
        $cantidad=0;
        while($new)
        {
            $new= Doctrine_Core::getTable('Lote')->find($new->getPadre());
            if($new)
            {   
                $cantidad=$cantidad+($new->getCantidad_Actual());
                $idx=$new;
            }
        }
        return array('unidadesVendidas' => count($idx->getUnidadLote()), 'cantidad' => $cantidad );
    }

    public function getVendidas()
    {
        $pos= strpos($this->getNumero(), '/');
        if($pos==false)
        {
            $unidadesVendidas=count($this->getUnidadLote());
            if($unidadesVendidas>$this->getCantidad_Actual())
            {
                 $unidadesVendidas=$this->getCantidad_Actual();
            }
        }
        else
        {   $ancestro=$this->getAncestro();
            $unidadesVendidas=$ancestro['unidadesVendidas'];
            $cantidad=$ancestro['cantidad'];
            if($unidadesVendidas>$cantidad)
            {
                $unidadesVendidas=$unidadesVendidas-$cantidad;
                if($unidadesVendidas>$this->getCantidad_Actual())
                {
                    $unidadesVendidas=$this->getCantidad_Actual();
                }
            }
            else
            {
                $unidadesVendidas=0;
            }

        }
        return $unidadesVendidas;
    }

//    public function getFechaElaboracion() {
//        return $this->getPauta()->getFecha();
//    }

}